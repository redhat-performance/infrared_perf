---
- hosts: localhost
  vars:
      undercloud_host: "{{ groups.undercloud|first }}"
  tasks:
      - name: get subnet mask
        shell: |
            echo {{ cidr }} | cut -d '/' -f2
        register: prefix

      - name: set subnet mask
        set_fact:
            subnet_mask: "{{ prefix.stdout }}"

      - block:
          - name: Get Product Name of 1029u
            shell: |
               dmidecode -t system | grep "Product Name" | cut -d '-' -f3
            register: product_name_1029u
            when: machine_type == '1029u'
            delegate_to: "{{ undercloud_hostname }}"
            vars:
              ansible_python_interpreter: "{{ python_interpreter }}"
              ansible_user: "root"

          - name: set fact rhel 8 ifaces (1029u)
            set_fact:
              rhel8_interfaces: "{{ (product_name_1029u.stdout == 'TN10RT') | ternary('rhel8_interfaces_tn10rt', 'rhel8_interfaces_trtp') }}"
            when: osp_release|int > 14 and machine_type == '1029u'

          - name: set fact for rhel7 ifaces (r640)
            set_fact:
              rhel7_interfaces: "{{ (undercloud_hostname.split('-')[0] == 'f04') | ternary('rhel7_interfaces_f04', 'rhel7_interfaces') }}"
            when: machine_type == 'r640'

          - name: set fact for rhel8 ifaces (r640)
            set_fact:
              rhel8_interfaces: "{{ (undercloud_hostname.split('-')[0] == 'f04') | ternary('rhel8_interfaces_f04', 'rhel8_interfaces') }}"
            when: machine_type == 'r640'

          - name: set_fact iface_rhel_version
            set_fact:
              iface_rhel_version: "{{ (osp_release|int > 14)| ternary(rhel8_interfaces, 'rhel7_interfaces') }}"
            when: machine_type == '1029u' or machine_type == 'r640'

          - name: set interfaces
            set_fact:
              ifaces: "{{ lab_vars['machine_types'][vendor][machine_type][iface_rhel_version] }}"
        vars:
          lab_vars: "{{ (lab_name == 'scale') | ternary(scale, alias) }}"
          iface_rhel_version: "{{ (osp_release|int > 14)| ternary('rhel8_interfaces', 'rhel7_interfaces') }}"
        when: lab_name in ['scale', 'alias']

      - name: set interfaces for non scale/alias machines
        set_fact:
          ifaces: "{{ (osp_release|int > 14)| ternary(interfaces.rhel8_interfaces, interfaces.rhel7_interfaces) }}"
        when: lab_name not in ['scale', 'alias']

      - name: interfaces is empty
        fail:
            msg: other lab types should specify interfaces
        when: (ifaces is defined) and (ifaces|length == 0)

      # br-isolated will be always first interface, followed by br-ctlplane,
      # br-tenant and br-external. br-external and br-ctlplane will be shared if
      # no separate nic avaialble for external interface.
      - name: set control and external interfaces
        set_fact:
           ctlplane_interface: "{{ (ifaces|length > 1) | ternary(ifaces[1], ifaces[0]) }}"
        when: ctlplane_interface is not defined

      - name: set external interface
        set_fact:
          external_interface: "{{ (ifaces|length > 3) | ternary(ifaces[3], ctlplane_interface) }}"
        when: external_interface is not defined

      - name: set tenant interface
        set_fact:
          tenant_interface: "{{ ifaces[2] }}"
        when: tenant_interface is not defined and ifaces|length > 2 and vlan_provider_network == false

      - name: set isolated interface
        set_fact:
          isolated_interface: "{{ ifaces[0] }}"
        when: isolated_interface is not defined and ifaces|length > 1

      - name: set storage_interface
        set_fact:
          storage_interface: "{{ ifaces[0] }}"
        when: storage_interface is not defined and ifaces|length > 1

      - name: set dedicated vlan based provider network
        set_fact:
          openshift_vlan_interface: "{{ ifaces[2] }}"
        when: vlan_provider_network == true and ifaces|length > 2

      - name: set nic configs
        set_fact:
          nic_configs: "{{ ansible_user_dir }}/virt"

      - name: create nic-configs directory structure in infrared format
        file:
          path: "{{ ansible_user_dir }}/virt/network/vlans/legacy"
          state: directory

      # infrared uses nic configs under 'legacy' directory for osp release version 10
      - name: set nic-config path
        set_fact:
          nic_config_path: "{{ ansible_user_dir }}/virt/network/vlans{{ ((osp_release|int > 10) | ternary('', '/legacy')) }}"

      - name: prepare network-environment.yaml.j2
        template:
            src: "network-environment.yaml.j2"
            dest: "{{ ansible_user_dir }}/virt/network/network-environment.yaml.j2"
            force: yes

      - name: prepare controller.yaml.j2
        template:
            src: "{{ (osp_release|int > 10) | ternary('controller.yaml.j2', 'osp10_controller.yaml.j2') }}"
            dest: "{{ nic_config_path }}/controller.yaml.j2"
            force: yes

      - name: prepare compute.yaml.j2
        vars:
            compute_path: "{{ (scale_compute_vms) | ternary('compute_vms.yaml.j2', 'compute.yaml.j2') }}"
        template:
            src: "{{ (osp_release|int > 10) | ternary(compute_path, 'osp10_compute.yaml.j2') }}"
            dest: "{{ nic_config_path }}/compute.yaml.j2"
            force: yes

      - name: prepare ceph-storage.yaml.j2
        template:
            src: ceph-storage.yaml.j2
            dest: "{{ nic_config_path }}/ceph-storage.yaml.j2"
            force: yes
        when: ceph_enabled
