---
- hosts: undercloud
  become: yes
  become_user: stack
  tasks:
    - name: set ocp vars
      include_vars:
        dir: vars
        files_matching: shift_stack_vars.yaml

    - name: create flavors
      include_tasks: tasks/create_flavors.yml

    - name: create new user and project
      vars:
        project_name: "{{ osp_project_name }}"
        user_name: "{{ osp_user_name }}"
      include_tasks: tasks/create_project_and_user.yml

    - name: get "{{ osp_project_name }}" tenant id
      shell: source /home/stack/overcloudrc && openstack project show {{ osp_project_name }} -f value -c id
      register: shiftstack_id
      args:
        chdir: /home/stack

    - name: set quotas to unlimited
      os_quota:
        cloud: "overcloud"
        name: "{{ shiftstack_id.stdout }}"
        server_groups: -1
        properties: -1
        ram: -1
        key_pairs: -1
        instances: -1
        cores: -1
        per_volume_gigabytes: -1
        gigabytes: -1
        backup_gigabytes: -1
        snapshots: -1
        volumes: -1
        backups: -1
        subnetpool: -1
        port: -1
        subnet: -1
        network: -1
        floating_ips: -1
        floatingip: -1
        security_group_rule: -1
        security_group: -1
        router: -1
        rbac_policy: -1

    - name: create {{ osp_project_name }}rc
      shell: |
        sed -e 's/OS_USERNAME=.*/OS_USERNAME={{ osp_user_name }}/' \
        -e 's/OS_PROJECT_NAME=.*/OS_PROJECT_NAME={{ osp_project_name }}/' \
        -e 's/OS_CLOUDNAME=.*/OS_CLOUDNAME={{ osp_project_name }}/' \
        -e 's/OS_PASSWORD=.*/OS_PASSWORD=redhat/' overcloudrc > {{ osp_project_name }}rc
      args:
        chdir: /home/stack

    - name: get cloud.yaml variables
      shell: |
        for key in $( set | awk '{FS="="}  /^OS_/ {print $1}' ); do unset $key ; done
        source /home/stack/"{{ osp_project_name }}"rc
        echo -n " {{ osp_project_name }}: \
          {'auth': \
            { 'auth_url': '$OS_AUTH_URL', \
              'username': '$OS_USERNAME', \
              'password': '$OS_PASSWORD', \
              $(if [ -n "$OS_USER_DOMAIN_NAME" ]; then echo "'user_domain_name': '${OS_USER_DOMAIN_NAME}',"; fi) \
              $(if [ -n "$OS_PROJECT_DOMAIN_NAME" ]; then echo "'project_domain_name': '${OS_PROJECT_DOMAIN_NAME}',"; fi) \
              'project_name': '${OS_PROJECT_NAME:-$OS_TENANT_NAME}' \
            } $(if [ -n "$OS_IDENTITY_API_VERSION" ]; then echo ",'identity_api_version': '${OS_IDENTITY_API_VERSION}'"; fi) }"
      register: cloud_details

    - name: Set clouds_yaml fact
      set_fact:
        clouds_yaml: "{{ cloud_details.stdout|from_yaml }}"

    - name: insert cloud parameters
      blockinfile:
        dest: "/home/stack/clouds.yaml"
        block: |5
              {{ clouds_yaml|to_nice_yaml(indent=4) }}
        insertbefore: "#END shiftstack SECTION"
        marker: "#{mark} shiftstack PARAMETERS"

    - name: read ssh key file
      slurp:
        src: "{{ ssh_key_file }}"
      register: ssh_key_content

    - name: set pull secret
      set_fact:
        ocp_pull_secret: "{{ pull_secret| to_yaml }}"
      when: pull_secret is defined

    - name: set pull secret from env
      set_fact:
        ocp_pull_secret: "{{ lookup('env', 'OPENSHIFT_INSTALL_PULL_SECRET') }}"
      when: pull_secret is not defined

    - name: set key value fact
      set_fact:
        ssh_public_key: "{{ ssh_key_content['content'] | b64decode }}"

    - name: use 3rd and 4th fips
      block:
        - name: get the public ips
          set_fact:
            api_floating_ip: "{{ external_net_cidr | next_nth_usable(3) }}"
            ingress_floating_ip: "{{ external_net_cidr | next_nth_usable(4) }}"

        - name: create api floating ip
          shell: |
            source /home/stack/overcloudrc
            openstack floating ip create --project {{ shiftstack_id.stdout }} --floating-ip-address {{ api_floating_ip }} {{ public_net_name }}

        - name: create ingress floating ip
          shell: |
            source /home/stack/overcloudrc
            openstack floating ip create --project {{ shiftstack_id.stdout }} --floating-ip-address {{ ingress_floating_ip }} {{ public_net_name }}
      when: random_fip == false

    - name: create fips randomly
      block:
        - name: create api floating ip
          shell: |
            source /home/stack/overcloudrc
            openstack floating ip create --project {{ shiftstack_id.stdout }} {{ public_net_name }} -f value -c floating_ip_address
          register: api_fip

        - name: create ingress floating ip
          shell: |
            source /home/stack/overcloudrc
            openstack floating ip create --project {{ shiftstack_id.stdout }} {{ public_net_name }} -f value -c floating_ip_address
          register: ingress_fip

        - name: set the public ips
          set_fact:
            api_floating_ip: "{{ api_fip.stdout }}"
            ingress_floating_ip: "{{ ingress_fip.stdout }}"
      when: random_fip == true

    - name: add DNS detail in etc/hosts
      blockinfile:
        path: "/etc/hosts"
        block: |
            {{ api_floating_ip }} api.{{ ocp_cluster_name }}.{{ ocp_base_domain }}
            {{ ingress_floating_ip }} console-openshift-console.apps.{{ ocp_cluster_name }}.{{ ocp_base_domain }}
            {{ ingress_floating_ip }} openshift-authentication-openshift-authentication.apps.{{ ocp_cluster_name }}.{{ ocp_base_domain }}
        insertafter: "EOF"
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER {{ ocp_cluster_name }}"
      become: yes
      become_user: root
      when: public_external_interface is not defined or public_external_interface == false or random_fip == true

    - name: create install dir
      file:
        path: /home/stack/{{ ocp_cluster_name }}
        state: directory

    - name: prepare install-config
      template:
        src: "{{ playbook_dir }}/templates/install-config.yaml.j2"
        dest: "/home/stack/install-config.yaml"

    - name: copy the install-config to metadata dir
      copy:
        src: "/home/stack/install-config.yaml"
        dest: "/home/stack/{{ ocp_cluster_name }}/"
        remote_src: yes

    - name: Set url for installer
      set_fact:
        ocp_installer_url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/
      when: ocp_dev_preview == false

    - name: Set url for installer
      set_fact:
        ocp_installer_url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp-dev-preview/
      when: ocp_dev_preview

    - name: get the latest installer
      get_url:
        validate_certs: no
        url: "{{ ocp_installer_url }}{{ ocp_release }}/openshift-install-linux.tar.gz"
        dest: /home/stack/openshift-install-linux.tar.gz

    - name: untar installer
      unarchive:
        src: /home/stack/openshift-install-linux.tar.gz
        dest: /home/stack/
        remote_src: yes

    - name: Create ignition-configs with openshift-installer
      shell: |
        ./openshift-install --log-level=debug create ignition-configs --dir=/home/stack/{{ ocp_cluster_name }}/ > /home/stack/{{ ocp_cluster_name }}/create_ignition_configs.log 2>&1
      args:
        chdir: /home/stack/

    - name: Backup the ignition-configs
      copy:
        src: "/home/stack/{{ ocp_cluster_name }}/{{ item }}.ign"
        dest: "/home/stack/{{ ocp_cluster_name }}/{{ item }}.ign.orig"
        remote_src: yes
      with_items:
        - master
        - worker
        - bootstrap

    - name: Read original master.ign config file
      slurp:
        src: "/home/stack/{{ ocp_cluster_name }}/master.ign.orig"
      register: master_ign
      when: ocp_master_etcd_nvme

    - name: Get master etcd on nvme ignition configuration
      set_fact:
        master_ign_config_base: "{{ master_ign['content'] | b64decode }}"
        master_etcd_nvme_config: "{{ lookup('template', 'master-etcd.ign.json') }}"
      when: ocp_master_etcd_nvme

    - name: Dump new version of master.ign file
      copy:
        content: "{{ master_ign_config_base | combine(master_etcd_nvme_config) | to_json }}"
        dest: "/home/stack/{{ ocp_cluster_name }}/{{ item }}"
      with_items:
        - master.ign
        - master.ign.etcd
      when: ocp_master_etcd_nvme

    - name: run installer
      shell: |
        ./openshift-install --log-level=debug create cluster --dir={{ ocp_cluster_name }} > ocp_install.log 2>&1
      args:
        chdir: /home/stack/

    - name: install ocp client
      block:
        - name: get the ocp client
          get_url:
            validate_certs: no
            url: "{{ ocp_installer_url }}{{ ocp_release }}/openshift-install-linux.tar.gz"
            dest: /home/stack/openshift-client-linux.tar.gz

        - name: untar ocp client
          unarchive:
            src: /home/stack/openshift-client-linux.tar.gz
            dest: /home/stack/
            remote_src: yes
            mode: 0700

        - name: copy oc to bin
          shell: |
            sudo cp /home/stack/oc /usr/local/bin
            sudo chmod a+x /usr/local/bin/oc
      when: install_client == true

    - name: create .kube dir on home
      file:
        path: /home/stack/.kube
        state: directory
        mode: a+rwx

    - name: copy the kubeconfig file
      copy:
        src: /home/stack/{{ ocp_cluster_name }}/auth/kubeconfig
        dest: /home/stack/.kube/config
        mode: a+rx
        remote_src: yes

- import_playbook: create_ocp_infra_nodes.yml
  when: (ocp_create_infra_nodes|bool == true or ocp_create_workload_nodes|bool == true)
