---
- name: Get output of bulk introspection status and store as yaml
  shell: |
       source ~/stackrc
       {% if osp_release < 13 %}
       openstack baremetal introspection bulk status -f yaml
       {% else %}
       openstack baremetal introspection list -f yaml
       {% endif %}
  changed_when: false
  register: bulk_status

# Extract introspected nodes to yaml
- name: set fact for introspected nodes
  set_fact:
      introspected_nodes: '{{ bulk_status.stdout | from_yaml }}'

# Construct list of UUID's of nodes failing introspection
- name: set fact for introspection failed UUIDs
  set_fact:
      failed_nodes_uuids: "{{ (failed_nodes_uuids | default([]) ) + [ item[uuid_field_name] ] }}"
  with_items: "{{ introspected_nodes | default([]) }}"
  vars:
      - osp_version: "{{ osp_release }}"
      - uuid_field_name: "{{ ( osp_version|int < 13) | ternary('Node UUID', 'UUID') }}"
      - finished_condition:  "{{ item.get('Error') | ternary( True, (osp_version|int < 13) | ternary(item.get('Finished') == false, item.get('Finished at') is none )) }}"
  when:
      - finished_condition
  tags:
      - skip_ansible_lint

- name: delete failed nodes
  shell: |
      source ~/stackrc
      openstack baremetal node delete {{ item }}
  with_items: "{{ failed_nodes_uuids }}"
  changed_when: false
  ignore_errors: true

- name: get all nodes
  shell: |
      source ~/stackrc
      openstack baremetal node list -f value -c UUID
  register: total_nodes
  changed_when: false

- name: set provision state of all nodes to available
  shell: |
      source ~/stackrc;
      export PROV_STATE=$(openstack baremetal node show {{ item }} -c provision_state -f value);
      if [[ $PROV_STATE != *"available"* ]]; then
          openstack baremetal node provide {{ item }};
      fi
  with_items: "{{ total_nodes.stdout_lines | default([]) }}"
  changed_when: false

- name: wait for all nodes to be available
  shell: |
    source ~/stackrc;
    openstack baremetal node show {{ item }} -c provision_state -f value
  register: status
  until: ('available' in status.stdout)
  delay: 10
  retries: 10000
  ignore_errors: true
  changed_when: False
  with_items: "{{ total_nodes.stdout_lines | default([]) }}"
