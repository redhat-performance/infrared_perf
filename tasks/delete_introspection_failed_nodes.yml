---
- name: Get output of bulk introspection status and store as yaml
  shell: |
       source ~/stackrc
       {% if osp_release|int < 13 %}
       openstack baremetal introspection bulk status -f yaml
       {% else %}
       openstack baremetal introspection list -f yaml
       {% endif %}
  changed_when: false
  register: bulk_status

# Extract introspected nodes to yaml
- name: set fact for introspected nodes
  set_fact:
      introspected_nodes: '{{ bulk_status.stdout | from_yaml }}'

# Construct list of UUID's of nodes failing introspection
- name: set fact for introspection failed UUIDs
  set_fact:
      failed_nodes_uuids: "{{ (failed_nodes_uuids | default([]) ) + [ item[uuid_field_name] ] }}"
  with_items: "{{ introspected_nodes | default([]) }}"
  vars:
      - osp_version: "{{ osp_release }}"
      - uuid_field_name: "{{ ( osp_version|int < 13) | ternary('Node UUID', 'UUID') }}"
      - finished_condition:  "{{ item.get('Error') | ternary( True, (osp_version|int < 13) | ternary(item.get('Finished') == false, item.get('Finished at') is none )) }}"
  when:
      - finished_condition
  tags:
      - skip_ansible_lint

- name: get ipmi addr of failed nodes
  shell: |
    source ~/stackrc
    openstack baremetal node show {{ item }} --fields driver_info -f json | jq '.driver_info.ipmi_address'
  with_items: "{{ failed_nodes_uuids | default([]) }}"
  register: failed_nodes_ipmi_addr

- name: print the ipmi addr of failed nodes
  debug:
    msg: "{{ item.stdout }}"
  with_items: "{{ failed_nodes_ipmi_addr.results }}"
  ignore_errors: yes

# TODO for external labs

- name: get the machine type of introspection failed nodes
  set_fact:
    failed_nodes_machine_type: "{{ failed_nodes_machine_type|default([]) + [(type != '1029u')|ternary(type, (item.stdout.replace('mgmt-', '').replace('\"', '') in tn10rt) | ternary('1029utn10rt', '1029utrtp')) ] }}"
  vars:
      type: "{{ (lab_name == 'scale' | ternary(item.stdout.split('.')[0].split('-')[4], item.stdout.split('.')[0].split('-')[3])) }}"
  with_items: "{{ failed_nodes_ipmi_addr.results }}"
  when: lab_name in ['scale', 'alias']

- name: set machine count of failed nodes
  set_fact:
    failed_nodes_machine_count: {}

- name: get machine count of failed nodes
  set_fact:
    failed_nodes_machine_count: "{{ failed_nodes_machine_count | combine({item: (item in failed_nodes_machine_count)|ternary(failed_nodes_machine_count[item], 0)|int + 1 }, recursive=True) }}"
  with_items: "{{ failed_nodes_machine_type }}"
  when: failed_nodes_machine_type is defined

- name: print the machine count of failed nodes
  debug:
    msg: "{{ failed_nodes_machine_count }}"
  when: failed_nodes_machine_type is defined

- name: power off the failed nodes
  shell: |
    source ~/stackrc
    openstack baremetal node power off {{ item }}
  with_items: "{{ failed_nodes_uuids | default([]) }}"
  changed_when: false
  ignore_errors: true

- name: delete failed nodes
  shell: |
      source ~/stackrc
      openstack baremetal node delete {{ item }}
  with_items: "{{ failed_nodes_uuids | default([]) }}"
  changed_when: false
  ignore_errors: true

- name: get all nodes
  shell: |
      source ~/stackrc
      openstack baremetal node list -f value -c UUID
  register: total_nodes
  changed_when: false

- name: set provision state of all nodes to available
  shell: |
      source ~/stackrc;
      export PROV_STATE=$(openstack baremetal node show {{ item }} -c provision_state -f value);
      if [[ $PROV_STATE != *"available"* ]]; then
          openstack baremetal node provide {{ item }};
      fi
  with_items: "{{ total_nodes.stdout_lines | default([]) }}"
  changed_when: false
  register: prov_state
  until: prov_state is succeeded
  retries: 3
  delay: 30

- block:
    - name: introspection data for a nodes
      shell: |
        source ~/stackrc
        openstack baremetal introspection data save {{ item }} | jq . | grep by-path | cut -d \" -f 4
      register: storage_disks_info
      with_items: "{{ total_nodes.stdout_lines | default([]) }}"
      when: composable_roles != true


    - name: introspection data for a nodes
      shell: |
        source ~/stackrc
        for i in $(openstack baremetal node list --format value -c UUID); do
          if [[ `openstack baremetal node show $i --fields driver_info -f json | jq '.driver_info.ipmi_address'` =~ {{ ceph_machine_type }} ]]
          then
             openstack baremetal introspection data save $i | jq . | grep by-path | cut -d \" -f 4
          fi
        done
      register: storage_disks_info_comp
      with_items: "{{ total_nodes.stdout_lines | default([]) }}"
      when: composable_roles

    - name: set fact storage_node_disks
      set_fact:
        storage_node_disks: "{{ storage_node_disks|default([]) + item.stdout_lines }}"
      with_items: "{{ storage_disks_info.results }}"
      when: composable_roles != true

    - name: set fact storage_node_disks
      set_fact:
        storage_node_disks: "{{ storage_node_disks|default([]) + item.stdout_lines }}"
      with_items: "{{ storage_disks_info_comp.results }}"
      when: composable_roles

  when: ceph_enabled and storage_node_disks is not defined

- name: show the storage_node_disks
  debug:
    msg: "{{ storage_node_disks|unique }}"
  when: ceph_enabled
