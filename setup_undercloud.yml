- hosts: localhost
  gather_facts: yes
  vars:
      chassis_password:  "{{ instackenv_content.nodes[0].pm_password }}"
      osp_rhel_mapping:
        10: 7.7
        13: 7.9
        14: 7.7
        15: 8.0
        16: 8.1
        16.1: 8.2
        16.2: 8.4
        17.0: 9.0
  tasks:
    - name: set async_install to empty list
      set_fact:
        async_install: []

    - name: install os on undercloud node
      vars:
        needed_os: "RHEL {{ osp_rhel_mapping[osp_release|float] }}"
        hypervisor_host: "{{ undercloud_hostname }}"
        hypervisor_password: "{{ ansible_ssh_pass }}"
      include_tasks: tasks/install_os.yml

    - block:
        - name: set boot order to director
          include_tasks: tasks/set_boot_order_director.yml
      rescue:
        - name: Reset iDrac
          shell: |
             sshpass -p {{ chassis_password }} ssh -o StrictHostKeyChecking=no quads@mgmt-{{ item.stdout }} "racadm racreset soft -f"
          with_items:
            - "{{ host_list.results }}"

        - name: Wait for iDrac to be responsive
          shell: |
            source {{ badfish_venv }}/bin/activate;
            python3 badfish.py -H mgmt-{{ item[1].stdout }}  -u quads -p {{ chassis_password }} -i "{{ ansible_user_dir }}/badfish/config/idrac_interfaces.yml" --check-boot
          args:
            chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
          when: vendors is defined and item[0] == "dell"
          with_together:
            - "{{ vendors }}"
            - "{{ host_list.results }}"
          register: wait_for_idrac
          until: wait_for_idrac is succeeded
          retries: 20
          delay: 30

        - name: try again setting boot order to director
          include_tasks: tasks/set_boot_order_director.yml
      when: lab_name in ['scale', 'alias'] and set_boot_order == true

    - name: Check if stack user exists
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'echo success'
      register: test_user
      ignore_errors: true
      changed_when: false

    - name: check if stack user need to be created in undercloud
      set_fact:
        create_user: True
      when: test_user.stdout != "success"

- import_playbook: prepare_undercloud.yml
  when: hostvars['localhost']['create_user'] is defined
