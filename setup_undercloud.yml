- hosts: localhost
  gather_facts: yes
  vars:
      badfish_venv: "{{ ansible_user_dir }}/badfish/.venv"
      chassis_password:  "{{ instackenv_content.nodes[0].pm_password }}"
  tasks:
    - name: check if os installed as root user
      shell: |
        sshpass -p {{ ansible_ssh_pass }}  ssh -o 'PreferredAuthentications=password' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -q root@{{ undercloud_hostname }} 'cat /etc/redhat-release'
      register: rhel_release
      ignore_errors: true

    - name: set rhel version
      set_fact:
        rhel_version: "{{ rhel_release.stdout.split()[-2] }}"
      ignore_errors: true
      when: rhel_release.stdout != ""

    - name: Check if os is installed as stack user
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'cat /etc/redhat-release'
      register: rhel_release
      ignore_errors: true
      when: rhel_version is not defined

    - name: set rhel version
      set_fact:
        rhel_version: "{{ rhel_release.stdout.split()[-2] }}"
      when: rhel_version is not defined

    - name: set os_install
      set_fact:
        os_install: "{{ (((osp_release|int > 14) and (rhel_version is version('8.0', '<')))|ternary('RHEL 8.1', ((osp_release|int < 15) and (rhel_version is version ('8.0', '>=')))|ternary('RHEL 7.7', false))) }}"
      when: force_reprovision == false

    - name: set os_install
      set_fact:
        os_install: "{{ ((osp_release|int > 14)|ternary('RHEL 8.1', 'RHEL 7.7')) }}"
      when: force_reprovision == true

    - name: Reboot if OS install needed
      block:
        - name: delete overcloud before re install undercloud
          shell: |
            ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'source ~/stackrc && openstack overcloud delete overcloud -y'
          ignore_errors: true

        - include_tasks: tasks/copykeys.yml
          vars:
            hostname: "{{ hammer_host }}"
            ssh_user: "root"

        - name: clone badfish
          git:
            repo: "https://github.com/redhat-performance/badfish.git"
            dest: "{{ ansible_user_dir }}/badfish"

        - name: Create badfish virtualenv
          command: python3 -m venv {{ badfish_venv }} creates={{ badfish_venv }}

        - name: Install badfish requirements
          pip:
            requirements: "{{ ansible_user_dir }}/badfish/requirements.txt"
            virtualenv_command: /usr/bin/python3 -m venv
            virtualenv: "{{ badfish_venv }}"

        - include_tasks: tasks/get_interpreter.yml
          vars:
            hostname: "{{ hammer_host }}"
            user: "root"

        - name: update host to install new os
          shell: hammer -u {{ cloud_name }} -p {{ chassis_password }}  host update --name {{ undercloud_hostname }} --build 1 --operatingsystem '{{ os_install }}' --overwrite 1
          delegate_to: "{{ hammer_host }}"
          vars:
            ansible_user: root
            ansible_python_interpreter: "{{ python_interpreter }}"

        - name: set undercloud to PXE boot (Supermicro)
          shell: ipmitool -I lanplus -H mgmt-{{ undercloud_hostname }} -U quads -P {{ chassis_password }} chassis bootdev pxe options=persistent
          when: lab_name == "scale" and undercloud_hostname.split('.')[0].split('-')[3] in scale.machine_types.supermicro
          delegate_to: "{{ hammer_host }}"
          vars:
            ansible_user: root
            ansible_python_interpreter: "{{ python_interpreter }}"


        - name: power cycle undercloud (Supermicro)
          shell: ipmitool -I lanplus -H mgmt-{{ undercloud_hostname }} -U quads -P {{ chassis_password }} chassis power cycle
          when: lab_name == "scale" and undercloud_hostname.split('.')[0].split('-')[3] in scale.machine_types.supermicro
          delegate_to: "{{ hammer_host }}"
          vars:
            ansible_user: root
            ansible_python_interpreter: "{{ python_interpreter }}"

        - name: set undercloud to PXE boot off Foreman (Dell)
          shell: |
              source {{ badfish_venv }}/bin/activate
              python3 badfish.py -H mgmt-{{ undercloud_hostname }} -u quads -p {{ chassis_password }} -i config/idrac_interfaces.yml --boot-to-type foreman --pxe
          args:
            chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
          when: lab_name == "scale" and undercloud_hostname.split('.')[0].split('-')[3] in scale.machine_types.dell
          retries: 5
          delay: 3
          register: result
          until: result.rc == 0

        - name: power cycle undercloud (Dell)
          shell: |
              source {{ badfish_venv }}/bin/activate
              python3 badfish.py -H mgmt-{{ undercloud_hostname }}  -u quads -p {{ chassis_password }} --reboot-only
          args:
            chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
          when: lab_name == "scale" and undercloud_hostname.split('.')[0].split('-')[3] in scale.machine_types.dell

        - name: wait for 420 seconds before checking for undercloud
          wait_for:
            timeout: 420

        - name: waiting for the undercloud to be available
          wait_for:
            port: 22
            host: "{{ hostvars['localhost']['undercloud_hostname'] }}"
            search_regex: OpenSSH
            timeout: 30
          register: uc_reachable
          delegate_to: localhost
          retries: 100
          until: uc_reachable is succeeded
      when: (os_install is defined) and (os_install != false)

    - name: Check if stack user exists
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'echo success'
      register: test_user
      ignore_errors: true
      changed_when: false

    - name: check if stack user need to be created in undercloud
      set_fact:
        create_user: True
      when: test_user.stdout != "success"


- import_playbook: prepare_undercloud.yml
  when: hostvars['localhost']['create_user'] is defined
